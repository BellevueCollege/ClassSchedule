@model CTCClassSchedule.Common.ClassFootnote

@*<script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
*@
@using (Html.BeginForm())
{
		@Html.ValidationSummary(true)
		<fieldset>
			<legend>@(Model.CourseID) - @(Model.CourseTitle) </legend>

			@Html.Hidden("CourseID", Model.CourseID)
			@Html.Hidden("referrer", Request.UrlReferrer.ToString())

			<div class="editor-label">
				@Html.LabelFor(model => Model.HPFootnote, "Default Notes:")
			</div>
			@if (@Model.HPFootnote != "")
			{
				<div class="editor-field">
					@Model.HPFootnote
				</div>
			}
			<div class="editor-label">
                @Html.LabelFor(model => Model.Footnote, @Model.HPFootnote != "" ? "Additional Notes" : "Notes:")
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(model => Model.Footnote, new { @class = "editClassFootnotes", @cols = 80, @rows = 5 })
                @Html.ValidationMessageFor(model => Model.Footnote)
            </div>

			<div id="lastModifiedBy">
				@if(Model.LastUpdated != ""){
					<text>Last modified by </text>@Model.LastUpdatedBy<text> on </text>@Model.LastUpdated
		        }
			</div>
			<p class="clear"></p>
            <p>
                <input type="submit" value="Save" /> <a href="#" id="cancelEdit">Cancel</a>
            </p>
		</fieldset>
}

<script type="text/javascript">

	$(document).ready(function () {
		$("#cancelEdit").click(function (e) {
			e.preventDefault();
			$(".ui-dialog").hide();
			//showThrobber();
			window.location.href = $(location).attr('href');
		});

		$(".ui-dialog").keydown(function (e) {
			if (e.keyCode == 27) { // esc
				$(".ui-dialog").hide();
				//showThrobber();
				window.location.href = $(location).attr('href');
			}
		});

	});

	$("#edit-class").dialog({
	    autoOpen: false,
	    width: 'auto', // overcomes width:'auto' and maxWidth bug
	    maxWidth: 600,
	    height: 'auto',
	    modal: true,
	    fluid: true, //new option
	    resizable: false,
	    position: {
	        my: "center center",
	        at: "center center",
	        of: window
	    }
	});

	// on window resize run function
	$(window).resize(function () {
	    fluidDialog();
	});

	// catch dialog if opened within a viewport smaller than the dialog width
	$(document).on("dialogopen", ".ui-dialog", function (event, ui) {
	    fluidDialog();
	});

	function fluidDialog() {
	    var $visible = $(".ui-dialog:visible");
	    // each open dialog
	    $visible.each(function () {
	        var $this = $(this);
	        var dialog = $this.find(".ui-dialog-content");
	        //alert(dialog);
	        var fluid = dialog.dialog("option", "fluid");
	        var maxw = dialog.dialog("option", "maxWidth");

	        // if fluid option == true
	        if (fluid) {
	            var wWidth = $(window).width();
	            // check window width against dialog width
	            if (wWidth < maxw + 50) {
	                // keep dialog from filling entire screen
	                $this.css("max-width", "90%");
	            } else {
	                // fix maxWidth bug
	                $this.css("max-width", maxw);
	            }
	            //reposition dialog
	            var position = dialog.dialog("option", "position");
	            dialog.dialog("option", "position", position);
	        }
	    });

	}
</script>