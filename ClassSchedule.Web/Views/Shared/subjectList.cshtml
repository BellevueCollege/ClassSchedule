@using System.Diagnostics
@using CTCClassSchedule.Common
@using CTCClassSchedule.Controllers
@using CTCClassSchedule.Models
@using Common.Logging
@using CtcApi.Extensions
@model IList<SubjectModel>

@functions {
  private ILog _log = LogManager.GetCurrentClassLogger();
}

@{
	// construct the route values we'll pass to the ActionLink helper
	IDictionary<string, object> routeParms = ViewBag.LinkParams;
	// make sure the Subject parameter exists, so we can assign to it later
	if (!routeParms.Keys.Contains("Subject")) {
		routeParms.Add("Subject", string.Empty);
	}


	char PreviousLetter = '\0';
	int count = 0;
	string FriendlyYrq = ViewContext.RouteData.Values.Keys.Contains("YearQuarter") ? ViewContext.RouteData.Values["YearQuarter"].ToString() : "ALL";
}


@foreach (SubjectModel item in Model.OrderBy(s => s.Title))
{
	char letter = item.Title.First();
	if (letter != PreviousLetter)
	{
		if (count++ > 0)
		{
			@:</ul>
		}
		<h2 class="subject-letter">@letter</h2>
		@:<ul class="subject-list">
	}

	routeParms["Subject"] = item.Slug.Trim();
  string linkText = item.Title;

//  string[] prefixList = new string[] {};
//  if (prefixes.Any())
//  {
//    prefixList = prefixes.Distinct().ToArray();
//    Debug.Assert(prefixList.Any(), "Lost prefixes for '{0}' after conversion to Array!", linkText);
////    linkText = String.Format("{0} ({1})", linkText, prefixList.Mash(", "));
//  }
//  else
//  {
//    _log.Warn(m => m("No CoursePrefixes found for '{0}'.", linkText));
//  }
  string link;

	<li class="subject-name">
	@if (FriendlyYrq != "ALL")
	{
		if (routeParms.Keys.Contains("YearQuarter"))
		{
			routeParms["YearQuarter"] = FriendlyYrq;
		}
		else
		{
			routeParms.Add("YearQuarter", FriendlyYrq);
		}
	  link = Url.Action("YearQuarterSubject", "Classes", new RouteValueDictionary(routeParms));
	}
	else
	{
    link = Url.Action("Subject", "Classes", new RouteValueDictionary(routeParms));
	}
    <a href="@Html.Raw(link)">@linkText</a> @(item.CoursePrefixes.Any() ? string.Concat("(", item.CoursePrefixes.Distinct().ToArray().Mash(", "), ")") : string.Empty)

	@if (Context.User.Identity.Name.Length > 0 && Helpers.isAdmin(Context))
	{
		@Ajax.ActionLink("Edit",
				              "ProgramEdit",
				              "Classes",
				              new {
												Slug = item.Slug
				              },
				              new AjaxOptions {
												UpdateTargetId = "edit-program",
												HttpMethod = "GET",
												InsertionMode = InsertionMode.Replace,
												OnBegin = "$('#edit-program').dialog('open');",
				              },
				              new { @class = "edit_button" })
	}


	</li>
	PreviousLetter = letter;
}
</ul>


