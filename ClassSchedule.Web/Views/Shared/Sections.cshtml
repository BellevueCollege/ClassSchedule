@*
This file is part of CtcClassSchedule.

CtcClassSchedule is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CtcClassSchedule is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CtcClassSchedule.  If not, see <http://www.gnu.org/licenses/>.
*@
@using Ctc.Ods.Types
@using CTCClassSchedule.Common
@using Microsoft.Security.Application
@using StackExchange.Profiling
@using System.Text.RegularExpressions
@using CTCClassSchedule.Models
@model SectionsViewModel
@{
    MiniProfiler _profiler = MiniProfiler.Current;

    string sectionID = Model.Sections[0].ID.ToString();
    string _searchTerm = ViewBag.searchterm ?? string.Empty;
    int numCols = 3; //starting number of columns to keep track of for notes column span
}

<!-- section details -->
<tbody class="section-listing section-details" data-sectionid="@sectionID">
<tr>
    <th rowspan="2" scope="rowgroup" class="nowrap">@Html.Raw(string.IsNullOrWhiteSpace(_searchTerm) ? Model.Sections[0].ID.ItemNumber : Html.FormatWithSearchTerm(_searchTerm, Model.Sections[0].ID.ItemNumber).ToString())</th>
    <td>@Model.Sections[0].SectionCode</td>
    <td>
        @{
          bool firstIteration = true;
        }
	    @if (Model.Sections[0].Offered.Any())
	    {
          foreach (OfferedItem item in Model.Sections[0].Offered.OrderBy(o => o.SequenceOrder))
          {
            // Instructors
            if (firstIteration && string.IsNullOrWhiteSpace(item.InstructorName))
            {
                @:Staff
            }
            else
            {
              if (!string.IsNullOrWhiteSpace(item.InstructorName))
              {
                  if ( ! firstIteration ) 
                  {
                      <br />
                  }
                  <a href="https://www.bellevuecollege.edu/directory/?SearchString=@Url.Encode(item.InstructorName)">@Html.Raw(string.IsNullOrWhiteSpace(_searchTerm) ? item.InstructorName : Html.FormatWithSearchTerm(_searchTerm, item.InstructorName).ToString())</a>
              }
            }
            firstIteration = false;
          }
	    }
		@*else
		{
	        <li><!-- No section offerings found -->&nbsp;</li>
	    }*@
	</td>
    @using (_profiler.Step("Rendering offered items"))
    {
        <td>
        @{
            bool firstItem = true;
        }
        @foreach (SectionWithSeats section in Model.Sections)
        {

            if (section.Offered.Any())
            {
                foreach (OfferedItem item in section.Offered.OrderBy(o => o.SequenceOrder))
                {
                    if (!firstItem)
                    {
                        <br />
                    }
                    // Meeting times
                    if (Model.Sections[0].IsOnline)
                    {
                        @:Online
                    }
                    else
                    {
                        //build start/end time and room string
                        string timeRoom = "";
                        string startTime = String.Format("{0:t}", item.StartTime).Replace(" ", string.Empty).ToLower();
                        string endTime = String.Format("{0:t}", item.EndTime).Replace(" ", string.Empty).ToLower();
                        if ( !( string.IsNullOrWhiteSpace(startTime) && string.IsNullOrWhiteSpace(endTime) ) )
                        {
                            timeRoom += ", " + startTime + "-" + endTime;
                        }
                        if ( !string.IsNullOrWhiteSpace(item.Room) ) {
                            timeRoom += " in " + Encoder.HtmlEncode(item.Room);
                        }

                        @*
                        NOTE: Need to explicitly encode timeRoom because Html.Raw() skips encoding
                        And we need to use Raw() so that the entity doesn't get re-encoded
                        *@
                        <abbr title="@Helpers.GetFriendlyDayRange(item.Days)">@item.Days</abbr>@Html.Raw(timeRoom)
                        
                    }
                    firstItem = false;
                }
                //firstItem = false;
            }
            else
            {
            }
        } @*end of iterate section list*@
        </td>
    }
    @if (Model.Sections[0].Yrq.ID.CompareTo(Model.CurrentQuarter.ID) >= 0)
    {
        numCols += 2; //adding two more columns to span
        <td>

              @* Course books link *@
              <a href="@Helpers.GetBookstoreBooksLink(Model.Sections)"><span class="glyphicon glyphicon-book"><span class="sr-only">view required books/supplies</span></span></a>
        </td>
        <td class="availability" id="availability-@sectionID" aria-controls="@sectionID">
          @if (Model.Sections[0].SeatsAvailable == 0 || Model.Sections[0].WaitlistCount > 0)
          {
              if (Model.Sections[0].WaitlistCount > 0)
              {
                <strong class="seatsAvailable">Class full, @Model.Sections[0].WaitlistCount on waitlist</strong>
              }
              else
              {
                <strong class="seatsAvailable">Class full</strong>
                <span class="course-updated small"><a id="@sectionID" role="status"><span class="glyphicon glyphicon-refresh"></span> <span class="update-time">recheck</span></a></span>
              }
          }
          else
          {
              if (Model.Sections[0].SeatsAvailable < 0)
              {
                  // e.g. int.MinValue
                <strong class="seatsAvailable"></strong>
                <span class="course-updated small"><a id="@sectionID" role="status"><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span> <span class="update-time">check availability</span></a></span>
              }
              else
              {
                <strong class="seatsAvailable">@Model.Sections[0].SeatsAvailable</strong>
                <span class="course-updated small"><a id="@sectionID" role="status"><span class="glyphicon glyphicon-refresh"></span> refreshed <time class="update-time timeago" datetime="@Convert.ToDateTime(Model.Sections[0].SeatsLastUpdated)">@Model.Sections[0].SeatsLastUpdated</time></a></span>
              }
          }
    </td>
    }
    @if (Context.User.Identity.IsAuthenticated && Helpers.IsEditor(Context) && String.IsNullOrEmpty(_searchTerm))
    {
        @* FOR EDITING *@
        numCols++;    //if person is an editor, add another column to span - need to know this for notes
        <td class="editing">
		    @Ajax.ActionLink("Edit",
                                   "SectionEdit",
                                   "Classes",
                                   new
                                   {
                                       itemNumber = Model.Sections[0].ID.ItemNumber,
                                       yrq = Model.Sections[0].ID.YearQuarter
                                   },
                                   new AjaxOptions
                                   {
                                       UpdateTargetId = "edit-section",
                                       HttpMethod = "GET",
                                       InsertionMode = InsertionMode.Replace,
                                       OnBegin = "$('#edit-section').dialog('open'); $('.ui-widget-overlay').on('click', function () { $('#edit-section').dialog('close'); });",
                                       OnComplete = "fluidDialog();",
                                   },
                                   new { @class = "edit-button small" })
            
        </td>
    }
</tr>
<tr>
     @{
      HelperResult footnotes = ViewHelpers.DisplayFootnotes(Model.Sections[0].Footnotes, Model.Sections[0].SectionFootnotes, Model.CommonFootnotes, Model.Sections[0]);
      if (!String.IsNullOrWhiteSpace(Regex.Replace(Regex.Replace(footnotes.ToString(), "<[^>]*(>|$)", string.Empty), @"[\s\r\n]+", String.Empty)) || Helpers.IsEditor(Context))
      {
          <td colspan="@numCols" class="section-notes" aria-label="Notes">@footnotes</td>
      }
    }
 </tr>
</tbody>