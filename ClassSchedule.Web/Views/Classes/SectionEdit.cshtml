@using System.Configuration
@using Ctc.Ods.Config
@model CTCClassSchedule.Models.SectionEditModel

<div id="SectionEdit">
@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

  if (Model != null && Model.SectionToEdit != null)
  {
    ApiSettings _apiSettings = ConfigurationManager.GetSection(ApiSettings.SectionName) as ApiSettings;
    string commonCourseChar = _apiSettings.RegexPatterns.CommonCourseChar;

    <fieldset>
      <legend>@String.Concat(Model.SectionToEdit.CourseSubject, Model.SectionToEdit.IsCommonCourse ? commonCourseChar : string.Empty) @Model.SectionToEdit.CourseNumber #@Model.SectionToEdit.ID.ItemNumber - @Model.SectionToEdit.Yrq.FriendlyName</legend>

      @*Html.HiddenFor(m => m.SectionToEdit.ID)*@
      <input type="hidden" name="sectionID" value="@Model.SectionToEdit.ID.ToString()"/>

      <div id="accordion">
					<h3><a href="javascript:void(0)">Notes</a></h3>
					<div id="first">
						<div class="editor-label">
								@Html.LabelFor(m => m.SectionToEdit.Footnotes, "Default Notes:")
						</div>
						<div class="editor-field">
							@foreach (string footnote in Model.SectionToEdit.Footnotes) {
								<text>@footnote</text>
							}
						</div>

						<div class="editor-label">
								@Html.LabelFor(m => m.SectionToEdit.SectionFootnotes, "Additional Notes:")
						</div>
						<div class="editor-field">
								@Html.TextAreaFor(m => m.SectionToEdit.SectionFootnotes, new { @class = "editSectionFootnotes", @cols = 60, @rows = 14 })
								@Html.ValidationMessageFor(m => m.SectionToEdit.SectionFootnotes)
						</div>
					</div>

					<h3><a href="javascript:void(0)">Advanced Options</a></h3>
        <div id="second">
          <div class="editor-label">
            @Html.LabelFor(m => m.SectionToEdit.CourseTitle, "Custom Title (makes section show as a different class)")
          </div>
          <div class="editor-field">

            @Html.TextBoxFor(m => m.SectionToEdit.CourseTitle, new { @class = "SubjectTextfield", @maxlength = "100" })
            @Html.ValidationMessageFor(m => m.SectionToEdit.CourseTitle)
          </div>

          <div class="editor-label">
            @Html.LabelFor(m => m.SectionToEdit.CustomDescription, "Custom Description (only visibile when there is a custom title)")
          </div>
          <div class="editor-field">
            @Html.TextAreaFor(m => m.SectionToEdit.CustomDescription, new { @class = "editSectionFootnotes", @cols = 60, @rows = 14 })
            @Html.ValidationMessageFor(m => m.SectionToEdit.CustomDescription)
          </div>
        </div>

        <h3><a href="javascript:void(0)">Cross-listings</a></h3>
        <div id="third">
          <div class="editor-label">
            Courses which are cross-listed with this section
          </div>
          <div class="editor-field">
            <ul id="cross-listed-courses" class="cross-list-merger">
              @{
                if (Model.SectionToEdit.IsCrossListed && Model.CrossListedCourses != null)
                {
                  foreach (string courseID in Model.CrossListedCourses)
                  {
                    <li class="cross-listed-course-choice">
                      <span>@courseID</span><span class="cross-listed-course-choice-close ui-icon ui-icon-close"></span>
                      <input name="CrossListedCourses" value="@courseID" type="hidden" />
                    </li>
                  }
                }
              }
            </ul>
          </div>
          <div class="editor-label">
            Add a cross-listed CourseID
          </div>
          <div class="editor-field">
            <ul class="cross-list-merger">
              <li class="cross-list-course-new">
                @* TODO: Add client-side validation to new course IDs being entered. *@
                <input type="text" id="newCrossListCourseID" /><input type="button" id="addCourseID" value="&lt;&lt; Add"/>
              </li>
            </ul>
          </div>
        </div>
      </div>

				<div id="lastModifiedBy">
				    @if (Model.SectionToEdit.LastUpdated != "")
                    {
					    <text>Last modified by @(Model.SectionToEdit.LastUpdatedBy) on</text> @(Model.SectionToEdit.LastUpdated)
                    }
				</div>
				<p class="clear"></p>
        <p>
            <input type="submit" value="Save" /> <a href="#" id="cancelEdit">Cancel</a>
        </p>
    </fieldset>

    }
    else
    {
		  <p class="input-validation-error">
		    <strong>Invalid Section:</strong> Did not receive any Section information.
		  </p>
		}
}
</div>

  <script type="text/javascript">

    $(document).ready(function() {
      $("#accordion").accordion();

      $("#cancelEdit").click(function(e) {
        e.preventDefault();
        $("#edit-section").dialog('close');
      });

      $(".ui-dialog").keydown(function(e) {
        if (e.keyCode == 27) { // esc
          $("#edit-section").dialog('close');
        }
      });

      // Delete cross-listed course choices
      $('#cross-listed-courses').on('click', '.cross-listed-course-choice-close', function() {
        var courseToRemove = $(this).parent(); // Remove the courseID from the list of selected
        $(courseToRemove).remove();
      });

      // Add a cross-listed course
      $('#addCourseID').click(function() {
       // console.log('Clicked Add button');

        var txtBox = $('#newCrossListCourseID');
        var enteredCourseID = txtBox.val().toUpperCase();
       // console.log('Value = ' + enteredCourseID);

        // only continue if we have a syntactically valid course ID (too expensive to call to the DB to completely validate)
        if (enteredCourseID.length > 0 && enteredCourseID.match(/^([A-Z]{1,4}&?|[A-Z]{1,5})&{0}\s+\d{3,4}/)) {
          var optionToAdd = '<li class="cross-listed-course-choice"><span>' + enteredCourseID + '</span><input name="CrossListedCourses" value="' + enteredCourseID + '" type="hidden"><span class="cross-listed-course-choice-close ui-icon ui-icon-close"></span></li>';
         // console.log('Adding ' + optionToAdd);

          $('#cross-listed-courses').append(optionToAdd);

         // console.log("Clearing textbox.");
          txtBox.val('');
        } else {
          // TODO: highlight empty field
          alert("Please enter a valid CourseID (e.g. ENGL 101)");
          txtBox.focus();
          txtBox.select();
        }
      });
    });
  </script>