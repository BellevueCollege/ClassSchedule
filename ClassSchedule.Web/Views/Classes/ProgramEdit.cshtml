@using CTCClassSchedule.Models
@model CTCClassSchedule.ProgramEditModel


@using (Html.BeginForm())
{
  @Html.ValidationSummary(true)

	<fieldset id="ProgramEdit">
		@Html.HiddenFor(model => model.Subject.SubjectID)
		@Html.HiddenFor(model => model.Subject.Slug)

		<div class="editor-label">
			@Html.LabelFor(model => model.Subject.Title)
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(model => model.Subject.Title, new { @class = "subject-text-field", @maxlength = "50" })
			@Html.ValidationMessageFor(model => model.Subject.Title)
		</div>

		<!-- Subject Merging -->
		<div class="editor-label">
			Modify subject's course prefixes
		</div>
		<div class="editor-field">
			<ul class="subject-merger subject-text-field">
				@{
						IList<string> mergedPrefixes = Model.Subject.CoursePrefixes.Select(s => s.CoursePrefixID).ToList();
						foreach (string prefix in mergedPrefixes)
						{
							<li class="subject-choice">
								<span>@prefix.Trim()</span>
								<input name="PrefixesToMerge" value="@prefix.Trim()" type="hidden" />
								<span class="subject-choice-close ui-icon ui-icon-close"></span>
							</li>
						}
						<li class="subject-new">
							<select id="newSubjectMerge">
								<option>Select</option>
								@foreach (string prefix in Model.AllCoursePrefixes)
								{
									@* Don't output an option if the prefix is already merged *@
									if (!mergedPrefixes.Contains(prefix))
									{
										<option>@prefix</option>
									}
								}
							</select>
						</li>
					}
			</ul>
		</div>

		<div class="editor-label">
			@Html.LabelFor(model => model.Subject.Intro)
		</div>
		<div class="editor-field">
			@Html.TextAreaFor(model => Model.Subject.Intro, new { @class = "subject-text-field", @cols = 60, @rows = 7 })
			@Html.ValidationMessageFor(model => model.Subject.Intro)
		</div>

        <div class="editor-label">
	        @Html.LabelFor(model => model.Department.DepartmentID, "Department")
	    </div>
	    <div id="department-field" class="editor-field">
	        @Html.DropDownListFor(model => model.Department.DepartmentID, 
	                          Model.AllDepartments.Select(d => new SelectListItem {Value = d.DepartmentID.ToString(), Text = d.Title}).OrderBy(i => i.Text), 
	                          new { @class = "subject-text-field", @maxlength = "50" })
	        @Html.ValidationMessageFor(model => model.Department.DepartmentID)
	    </div>

	    <div class="editor-label">
	    <div id="department-url" class="url-preview">
	        @if (!string.IsNullOrWhiteSpace(Model.Department.URL))
	        {
	        <a href="@Model.Department.URL">Link preview</a>
	        }
	        else
	        {
            @:(No web page specified)
	        }
	    </div>
	    <noscript>
	        <div>Preview will not update unless Javascript is enabled.</div>
	    </noscript>
	    </div>
	</fieldset>

	<div id="lastModifiedBy">
		@if (Model.Subject.LastUpdated != null)
		{
			<text>Last modified by </text>@Model.Subject.LastUpdatedBy<text> on </text>@Model.Subject.LastUpdated
		}
	</div>

	<div class="bottom">
		<p>
			<input type="submit" value="Save" /> <a href="@Request.UrlReferrer.ToString()" id="cancelEdit">Cancel</a>
		</p>
	</div>
}

@* TODO: Can we also put this JS in a pageScripts section? *@
<script type="text/javascript">
  $(function () {
    
      // Cancel and esc closure functionality
      $("#cancelEdit").click(function (e) {
          e.preventDefault();
          $('#edit-program').dialog('close');
      });

      $(".ui-dialog").keydown(function (e) {
          if (e.keyCode == 27) { // esc
              $("#edit-program").dialog('close');
          }
      });

    // Delete subject merge choices
    $('.subject-merger').on('click', '.subject-choice-close', function () {

      // Make sure at least one prefix is always merged
      if ($('.subject-merger').children('.subject-choice').length > 1) {
        subjectToRemove = $(this).parent();

        // Add option back into the drop down list alphabetically
        var subjectToAdd = '<option>' + $(subjectToRemove).text() + '</option>';
        $('#newSubjectMerge').children().each(function () {
          if ($(this).text() != 'Select' && $(this).text() > $(subjectToRemove).text()) {
            $(subjectToAdd).insertBefore($(this));
            return false;
          }
        });

        // Remove the subject from the list of selected
        $(subjectToRemove).remove();
      }
    });

    // Allow user to select subjects to merge
    $('#newSubjectMerge').change(function () {
      var selectedSubject = $(this).find(':selected');

      if ($('#newSubjectMerge').prop('selectedIndex') > 0) {
        var optionToAdd = '<li class="subject-choice"><span>' + selectedSubject.text() + '</span><input name="PrefixesToMerge" value="' + selectedSubject.text() + '" type="hidden"><span class="subject-choice-close ui-icon ui-icon-close"></span></li>';
        $(optionToAdd).insertBefore($(this).parent());
        selectedSubject.remove();
        $('#newSubjectMerge').prop('selectedIndex', 0);
      }
    });

    // Update department & division previews when selection is changed
    $('#department-field select').change(function() {
      var deptLinks = new Array();
    @foreach (Department department in Model.AllDepartments) {
        @:deptLinks[@(department.DepartmentID)] = "@department.URL";
    }

      UpdatePreview($(this), $('#department-url'), deptLinks);
    });
  });

  /** Update URL preview */
  function UpdatePreview(ddl, container, links) {
    console.log("UpdatePreview(" + ddl + ", " + container + ")");
    //console.log(ddl);
    //console.log(container);
    var selected = ddl.find(":selected");
    var id = selected.val();
    console.log("New dept ID = '" + id + "'");

    var link = links[id];
    console.log("New dept link = '" + link + "'");

    var title = "Link preview";

    if (link && link != '') {
      container.html('<a href="' + link + '">' + title + '</a>');
    } else {
      container.text(title);
    }
  }

  /*$("#edit-program").dialog({
      autoOpen: false,
      width: 'auto', // overcomes width:'auto' and maxWidth bug
      maxWidth: 600,
      height: 'auto',
      modal: true,
      fluid: true, //new option
      resizable: false,
      position: {
          my: "center center",
          at: "center center",
          of: window
      }
  });

  // on window resize run function
  $(window).resize(function () {
      fluidDialog();
  });

  // catch dialog if opened within a viewport smaller than the dialog width
  $(document).on("dialogopen", ".ui-dialog", function (event, ui) {
      fluidDialog();
  });

  function fluidDialog() {
      var $visible = $(".ui-dialog:visible");
      // each open dialog
      $visible.each(function () {
          var $this = $(this);
          var dialog = $this.find(".ui-dialog-content");
          //alert(dialog);
          var fluid = dialog.dialog("option", "fluid");
          var maxw = dialog.dialog("option", "maxWidth");

          // if fluid option == true
          if ( fluid ) {
              var wWidth = $(window).width();
              // check window width against dialog width
              if (wWidth < maxw + 50) {
                  // keep dialog from filling entire screen
                  $this.css("max-width", "90%");
              } else {
                  // fix maxWidth bug
                  $this.css("max-width", maxw);
              }
              //reposition dialog
              var position = dialog.dialog("option", "position");
              dialog.dialog("option", "position", position);
          }
      });

  }*/
</script>